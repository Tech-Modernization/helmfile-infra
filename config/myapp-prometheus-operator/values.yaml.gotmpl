defaultRules:
  create: false
defaultRules:
  create: true
  rules:
    alertmanager: false
    etcd: false
    general: false
    k8s: false
    kubeApiserver: false
    kubePrometheusNodeAlerting: false
    kubePrometheusNodeRecording: false
    kubeScheduler: false
    kubernetesAbsent: false
    kubernetesApps: false
    kubernetesResources: false
    kubernetesStorage: false
    kubernetesSystem: false
    node: false
    prometheusOperator: false
    prometheus: true

kubeApiServer:
  enabled: false
kubelet:
  enabled: false
kubeControllerManager:
  enabled: false
coreDns:
  enabled: false
kubeDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
kubeProxy:
  enabled: false
kubeStateMetrics:
  enabled: false
nodeExporter:
  enabled: false

alertmanager:
  enabled: false

prometheusOperator:
  enabled: false
  image:
    repository: {{ .Environment.Values.helm.imagePrefix }}coreos/prometheus-operator
    tag: v0.30.1
  configmapReloadImage:
    repository: {{ .Environment.Values.helm.imagePrefix }}coreos/configmap-reload
    tag: v0.0.1
  prometheusConfigReloaderImage:
    repository: {{ .Environment.Values.helm.imagePrefix }}coreos/prometheus-config-reloader
    tag: v0.30.1
  hyperkubeImage:
    repository: {{ .Environment.Values.helm.imagePrefix }}hyperkube
    tag: v1.12.1
  admissionWebhooks:
    enabled: false
    patch:
      enabled: false
      image:
        repository: {{ .Environment.Values.helm.imagePrefix }}jettech/kube-webhook-certgen
        tag: v1.0.0
grafana:
  enabled: true
  grafana.ini:
    auth.anonymous:
        enabled: true
    external_image_storage:
      provider: gcs
    external_image_storage.gcs:
      key_file: /tmp/extra/cloudfunctionsforintegrations-9e9beac9534f.json
#      key_file: /tmp/extra/hangouts-chat-jira-f1ee9a27869c.json
      bucket: {{ .Environment.Name }}
    log:
      level: debug
      filters: external_image_storage:debug
      filters: rendering:debug
  extraConfigmapMounts:
    - name: extra-configmap
      mountPath: /tmp/extra
      configMap: extra-configmap
      readOnly: true
  ingress:
    enabled: true
    hosts:
      - myapp-grafana-{{ .Environment.Name }}.{{ .Environment.Values.helm.domain }}
  image:
    #repository: {{ .Environment.Values.helm.imagePrefix }}myapp-grafana/grafana
    #tag: 6.6.2-1
    repository: {{ .Environment.Values.helm.imagePrefix }}grafana/grafana
  sidecar:
    image: {{ .Environment.Values.helm.imagePrefix }}kiwigrid/k8s-sidecar:0.0.16
    sidecar:
      dashboards:
        enabled: true
      datasources:
        enabled: true
  adminPassword: {{ .Environment.Values.grafana_adminPassword }}

prometheus:
  ingress:
    enabled: true
    hosts:
      - myapp-prometheus-{{ .Environment.Name }}.{{ .Environment.Values.helm.domain }}
  prometheusSpec:
    externalLabels:
      cluster: {{ .Environment.Name }}
    externalUrl: "http://nyapp-prometheus-{{ .Environment.Name }}.{{ .Environment.Values.helm.domain }}/"
    image:
      #repository: {{ .Environment.Values.helm.imagePrefix }}prometheus/prometheus
      #tag: v2.12.0
      repository: {{ .Environment.Values.helm.imagePrefix }}prom/prometheus
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: {{ .Environment.Values.helm.storageClass }}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi
    serviceMonitorSelectorNilUsesHelmValues: false
    additionalScrapeConfigsExternal: false

    ## Alertmanagers to which alerts will be sent
    ## Default configuration will connect to the alertmanager deployed as part of this release
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#alertmanagerendpoints
    alertingEndpoints:
      - name: prometheus-operator-alertmanager
        namespace: prometheus
        port: http
        scheme: http
        pathPrefix: /
        apiVersion: v2

#    ruleNamespaceSelector:
#      matchNames:
#      - myapp-prometheus
#    serviceMonitorNamespaceSelector:
#      matchNames:
#      - myapp-prometheus

    ## AdditionalScrapeConfigs allows specifying additional Prometheus scrape configurations. Scrape configurations
    ## are appended to the configurations generated by the Prometheus Operator. Job configurations must have the form
    ## as specified in the official Prometheus documentation:
    ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#<scrape_config>. As scrape configs are
    ## appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility
    ## to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible
    ## scrape configs are going to break Prometheus after the upgrade.
    ##
    ## The scrape configuraiton example below will find master nodes, provided they have the name .*mst.*, relabel the
    ## port to 2379 and allow etcd scraping provided it is running on all Kubernetes master nodes
    ##
    additionalScrapeConfigs:
      - job_name: myapp-orders-batch
        scrape_interval: 30s
        scrape_timeout: 10s
        scheme: https
        static_configs:
          - targets:
{{ toYaml .Environment.Values.helm.prometheus.scrape_targets | indent 12}}
        metrics_path: /orders-batch/actuator/prometheus
